// Generated by vp3


// This is a wrapper around the Chisel-Generated code,
// and it is the top-level of the packaged core.

module SiFiveE31Coreplex(
                    input         clk,
                    input         reset,
                     
                     // Cached IO
                    input         axi_mst_mem_AWREADY,
                    output        axi_mst_mem_AWVALID,
                    output [31:0] axi_mst_mem_AWADDR,
                    output [7:0]  axi_mst_mem_AWLEN,
                    output [2:0]  axi_mst_mem_AWSIZE,
                    output [1:0]  axi_mst_mem_AWBURST,
                    output        axi_mst_mem_AWLOCK,
                    output [3:0]  axi_mst_mem_AWCACHE,
                    output [2:0]  axi_mst_mem_AWPROT,
                    output [3:0]  axi_mst_mem_AWQOS,
                    output [3:0]  axi_mst_mem_AWREGION,
                    output [4:0]  axi_mst_mem_AWID,
                    output        axi_mst_mem_AWUSER,
                    input         axi_mst_mem_WREADY,
                    output        axi_mst_mem_WVALID,
                    output [63:0] axi_mst_mem_WDATA,
                    output        axi_mst_mem_WLAST,
                    output [4:0]  axi_mst_mem_WID, 
                    output [7:0]  axi_mst_mem_WSTRB,
                    output        axi_mst_mem_WUSER,
                    output        axi_mst_mem_BREADY,
                    input         axi_mst_mem_BVALID,
                    input [1:0]   axi_mst_mem_BRESP,
                    input [4:0]   axi_mst_mem_BID,
                    input         axi_mst_mem_BUSER,
                    input         axi_mst_mem_ARREADY,
                    output        axi_mst_mem_ARVALID,
                    output [31:0] axi_mst_mem_ARADDR,
                    output [7:0]  axi_mst_mem_ARLEN,
                    output [2:0]  axi_mst_mem_ARSIZE,
                    output [1:0]  axi_mst_mem_ARBURST,
                    output        axi_mst_mem_ARLOCK,
                    output [3:0]  axi_mst_mem_ARCACHE,
                    output [2:0]  axi_mst_mem_ARPROT,
                    output [3:0]  axi_mst_mem_ARQOS,
                    output [3:0]  axi_mst_mem_ARREGION,
                    output [4:0]  axi_mst_mem_ARID,
                    output        axi_mst_mem_ARUSER,
                    output        axi_mst_mem_RREADY,
                    input         axi_mst_mem_RVALID,
                    input [1:0]   axi_mst_mem_RRESP,
                    input [63:0]  axi_mst_mem_RDATA,
                    input         axi_mst_mem_RLAST,
                    input [4:0]   axi_mst_mem_RID,
                    input         axi_mst_mem_RUSER,
                     
                     // Mmio IO
                     
                    input         axi_mst_mmio_AWREADY,
                    output        axi_mst_mmio_AWVALID,
                    output [31:0] axi_mst_mmio_AWADDR,
                    output [7:0]  axi_mst_mmio_AWLEN,
                    output [2:0]  axi_mst_mmio_AWSIZE,
                    output [1:0]  axi_mst_mmio_AWBURST,
                    output        axi_mst_mmio_AWLOCK,
                    output [3:0]  axi_mst_mmio_AWCACHE,
                    output [2:0]  axi_mst_mmio_AWPROT,
                    output [3:0]  axi_mst_mmio_AWQOS,
                    output [3:0]  axi_mst_mmio_AWREGION,
                    output [4:0]  axi_mst_mmio_AWID,
                    output        axi_mst_mmio_AWUSER,
                    input         axi_mst_mmio_WREADY,
                    output        axi_mst_mmio_WVALID,
                    output [63:0] axi_mst_mmio_WDATA,
                    output        axi_mst_mmio_WLAST,
                    output [4:0]  axi_mst_mmio_WID,
                    output [7:0]  axi_mst_mmio_WSTRB,
                    output        axi_mst_mmio_WUSER,
                    output        axi_mst_mmio_BREADY,
                    input         axi_mst_mmio_BVALID,
                    input [1:0]   axi_mst_mmio_BRESP,
                    input [4:0]   axi_mst_mmio_BID,
                    input         axi_mst_mmio_BUSER,
                    input         axi_mst_mmio_ARREADY,
                    output        axi_mst_mmio_ARVALID,
                    output [31:0] axi_mst_mmio_ARADDR,
                    output [7:0]  axi_mst_mmio_ARLEN,
                    output [2:0]  axi_mst_mmio_ARSIZE,
                    output [1:0]  axi_mst_mmio_ARBURST,
                    output        axi_mst_mmio_ARLOCK,
                    output [3:0]  axi_mst_mmio_ARCACHE,
                    output [2:0]  axi_mst_mmio_ARPROT,
                    output [3:0]  axi_mst_mmio_ARQOS,
                    output [3:0]  axi_mst_mmio_ARREGION,
                    output [4:0]  axi_mst_mmio_ARID,
                    output        axi_mst_mmio_ARUSER,
                    output        axi_mst_mmio_RREADY,
                    input         axi_mst_mmio_RVALID,
                    input [1:0]   axi_mst_mmio_RRESP,
                    input [63:0]  axi_mst_mmio_RDATA,
                    input         axi_mst_mmio_RLAST,
                    input [4:0]   axi_mst_mmio_RID,
                    input         axi_mst_mmio_RUSER,

                     // Generic Interrupt Interface

                    input [30:0]  interruptVector,

                     // JTAG Interface

                    input         TDI,
                    output        TDO,
                    input         TCK,
                    input         TMS,
                    input         TRST,

                    output        DRV_TDO
 
                  );

   localparam DEBUG_ADDR_BITS = 5;
   localparam DEBUG_DATA_BITS = 34;
   localparam DEBUG_OP_BITS = 2;
   
   //|@Wires;
   wire [4:0] io_debug_req_bits_addr;
   wire [33:0] io_debug_req_bits_data;
   wire [1:0] io_debug_req_bits_op;
   wire  io_debug_req_ready;
   wire  io_debug_req_valid;
   wire [33:0] io_debug_resp_bits_data;
   wire [1:0] io_debug_resp_bits_resp;
   wire  io_debug_resp_ready;
   wire  io_debug_resp_valid;
   wire  io_interrupts_0;
   wire  io_interrupts_1;
   wire  io_interrupts_10;
   wire  io_interrupts_11;
   wire  io_interrupts_12;
   wire  io_interrupts_13;
   wire  io_interrupts_14;
   wire  io_interrupts_15;
   wire  io_interrupts_16;
   wire  io_interrupts_17;
   wire  io_interrupts_18;
   wire  io_interrupts_19;
   wire  io_interrupts_2;
   wire  io_interrupts_20;
   wire  io_interrupts_21;
   wire  io_interrupts_22;
   wire  io_interrupts_23;
   wire  io_interrupts_24;
   wire  io_interrupts_25;
   wire  io_interrupts_26;
   wire  io_interrupts_27;
   wire  io_interrupts_28;
   wire  io_interrupts_29;
   wire  io_interrupts_3;
   wire  io_interrupts_30;
   wire  io_interrupts_4;
   wire  io_interrupts_5;
   wire  io_interrupts_6;
   wire  io_interrupts_7;
   wire  io_interrupts_8;
   wire  io_interrupts_9;

   //=================================================
   // External Interrupts to PLIC
   // These do not directly correspond to the interrupt number.
   // The interrupt number is one higher.
   //  

   assign   io_interrupts_0 = interruptVector[0];
   assign   io_interrupts_1 = interruptVector[1];
   assign   io_interrupts_2 = interruptVector[2];
   assign   io_interrupts_3 = interruptVector[3];
   assign   io_interrupts_4 = interruptVector[4];
   assign   io_interrupts_5 = interruptVector[5];
   assign   io_interrupts_6 = interruptVector[6];
   assign   io_interrupts_7 = interruptVector[7];
   assign   io_interrupts_8 = interruptVector[8];
   assign   io_interrupts_9 = interruptVector[9];
   assign   io_interrupts_10 = interruptVector[10];
   assign   io_interrupts_11 = interruptVector[11];
   assign   io_interrupts_12 = interruptVector[12];
   assign   io_interrupts_13 = interruptVector[13];
   assign   io_interrupts_14 = interruptVector[14];
   assign   io_interrupts_15 = interruptVector[15];
   assign   io_interrupts_16 = interruptVector[16];
   assign   io_interrupts_17 = interruptVector[17];
   assign   io_interrupts_18 = interruptVector[18];
   assign   io_interrupts_19 = interruptVector[19];
   assign   io_interrupts_20 = interruptVector[20];
   assign   io_interrupts_21 = interruptVector[21];
   assign   io_interrupts_22 = interruptVector[22];
   assign   io_interrupts_23 = interruptVector[23];
   assign   io_interrupts_24 = interruptVector[24];
   assign   io_interrupts_25 = interruptVector[25];
   assign   io_interrupts_26 = interruptVector[26];
   assign   io_interrupts_27 = interruptVector[27];
   assign   io_interrupts_28 = interruptVector[28];
   assign   io_interrupts_29 = interruptVector[29];
   assign   io_interrupts_30 = interruptVector[30];

   //=================================================
   // DTM <-> Synchronizers Interface 

   wire                           dtm_req_ready;
   wire                           dtm_req_valid;
   wire [DEBUG_OP_BITS + DEBUG_ADDR_BITS + DEBUG_DATA_BITS - 1 : 0 ] dtm_req_data;
   
   wire                                                             dtm_resp_ready;
   wire                                                             dtm_resp_valid;
   wire [DEBUG_OP_BITS + DEBUG_DATA_BITS - 1 :0 ]                   dtm_resp_data;
    
   //=================================================
   // Synchronizers <-> Interface 
   //|@Waive no_source io_debug_req_bits_addr;
   //|@Waive no_source io_debug_req_bits_data;
   //|@Waive no_source io_debug_req_bits_op;
   //|@Waive no_source io_debug_req_valid;
   //|@Waive no_source io_debug_resp_ready;
   //|@Waive no_sink io_debug_req_ready;
   //|@Waive no_sink io_debug_resp_bits_data;
   //|@Waive no_sink io_debug_resp_bits_resp;
   //|@Waive no_sink io_debug_resp_valid;

   //=================================================
   // Sub Instances

   //|@Instance Top ChiselTop0
   //|                  -connect /^io_mem_axi_0_([awrb]+)_(bits_)?(.*)/ axi_mst_mem_\U$1$3
   //|                  -connect /^io_mmio_axi_0_([awrb]+)_(bits_)?(.*)/ axi_mst_mmio_\U$1$3;
   Top ChiselTop0 (
    .clk(clk)
   ,.reset(reset)
   ,.io_mem_axi_0_aw_ready(axi_mst_mem_AWREADY)
   ,.io_mem_axi_0_aw_valid(axi_mst_mem_AWVALID)
   ,.io_mem_axi_0_aw_bits_addr(axi_mst_mem_AWADDR[31:0])
   ,.io_mem_axi_0_aw_bits_len(axi_mst_mem_AWLEN[7:0])
   ,.io_mem_axi_0_aw_bits_size(axi_mst_mem_AWSIZE[2:0])
   ,.io_mem_axi_0_aw_bits_burst(axi_mst_mem_AWBURST[1:0])
   ,.io_mem_axi_0_aw_bits_lock(axi_mst_mem_AWLOCK)
   ,.io_mem_axi_0_aw_bits_cache(axi_mst_mem_AWCACHE[3:0])
   ,.io_mem_axi_0_aw_bits_prot(axi_mst_mem_AWPROT[2:0])
   ,.io_mem_axi_0_aw_bits_qos(axi_mst_mem_AWQOS[3:0])
   ,.io_mem_axi_0_aw_bits_region(axi_mst_mem_AWREGION[3:0])
   ,.io_mem_axi_0_aw_bits_id(axi_mst_mem_AWID[4:0])
   ,.io_mem_axi_0_aw_bits_user(axi_mst_mem_AWUSER)
   ,.io_mem_axi_0_w_ready(axi_mst_mem_WREADY)
   ,.io_mem_axi_0_w_valid(axi_mst_mem_WVALID)
   ,.io_mem_axi_0_w_bits_data(axi_mst_mem_WDATA[63:0])
   ,.io_mem_axi_0_w_bits_last(axi_mst_mem_WLAST)
   ,.io_mem_axi_0_w_bits_id(axi_mst_mem_WID[4:0])
   ,.io_mem_axi_0_w_bits_strb(axi_mst_mem_WSTRB[7:0])
   ,.io_mem_axi_0_w_bits_user(axi_mst_mem_WUSER)
   ,.io_mem_axi_0_b_ready(axi_mst_mem_BREADY)
   ,.io_mem_axi_0_b_valid(axi_mst_mem_BVALID)
   ,.io_mem_axi_0_b_bits_resp(axi_mst_mem_BRESP[1:0])
   ,.io_mem_axi_0_b_bits_id(axi_mst_mem_BID[4:0])
   ,.io_mem_axi_0_b_bits_user(axi_mst_mem_BUSER)
   ,.io_mem_axi_0_ar_ready(axi_mst_mem_ARREADY)
   ,.io_mem_axi_0_ar_valid(axi_mst_mem_ARVALID)
   ,.io_mem_axi_0_ar_bits_addr(axi_mst_mem_ARADDR[31:0])
   ,.io_mem_axi_0_ar_bits_len(axi_mst_mem_ARLEN[7:0])
   ,.io_mem_axi_0_ar_bits_size(axi_mst_mem_ARSIZE[2:0])
   ,.io_mem_axi_0_ar_bits_burst(axi_mst_mem_ARBURST[1:0])
   ,.io_mem_axi_0_ar_bits_lock(axi_mst_mem_ARLOCK)
   ,.io_mem_axi_0_ar_bits_cache(axi_mst_mem_ARCACHE[3:0])
   ,.io_mem_axi_0_ar_bits_prot(axi_mst_mem_ARPROT[2:0])
   ,.io_mem_axi_0_ar_bits_qos(axi_mst_mem_ARQOS[3:0])
   ,.io_mem_axi_0_ar_bits_region(axi_mst_mem_ARREGION[3:0])
   ,.io_mem_axi_0_ar_bits_id(axi_mst_mem_ARID[4:0])
   ,.io_mem_axi_0_ar_bits_user(axi_mst_mem_ARUSER)
   ,.io_mem_axi_0_r_ready(axi_mst_mem_RREADY)
   ,.io_mem_axi_0_r_valid(axi_mst_mem_RVALID)
   ,.io_mem_axi_0_r_bits_resp(axi_mst_mem_RRESP[1:0])
   ,.io_mem_axi_0_r_bits_data(axi_mst_mem_RDATA[63:0])
   ,.io_mem_axi_0_r_bits_last(axi_mst_mem_RLAST)
   ,.io_mem_axi_0_r_bits_id(axi_mst_mem_RID[4:0])
   ,.io_mem_axi_0_r_bits_user(axi_mst_mem_RUSER)
   ,.io_interrupts_0(io_interrupts_0)
   ,.io_interrupts_1(io_interrupts_1)
   ,.io_interrupts_2(io_interrupts_2)
   ,.io_interrupts_3(io_interrupts_3)
   ,.io_interrupts_4(io_interrupts_4)
   ,.io_interrupts_5(io_interrupts_5)
   ,.io_interrupts_6(io_interrupts_6)
   ,.io_interrupts_7(io_interrupts_7)
   ,.io_interrupts_8(io_interrupts_8)
   ,.io_interrupts_9(io_interrupts_9)
   ,.io_interrupts_10(io_interrupts_10)
   ,.io_interrupts_11(io_interrupts_11)
   ,.io_interrupts_12(io_interrupts_12)
   ,.io_interrupts_13(io_interrupts_13)
   ,.io_interrupts_14(io_interrupts_14)
   ,.io_interrupts_15(io_interrupts_15)
   ,.io_interrupts_16(io_interrupts_16)
   ,.io_interrupts_17(io_interrupts_17)
   ,.io_interrupts_18(io_interrupts_18)
   ,.io_interrupts_19(io_interrupts_19)
   ,.io_interrupts_20(io_interrupts_20)
   ,.io_interrupts_21(io_interrupts_21)
   ,.io_interrupts_22(io_interrupts_22)
   ,.io_interrupts_23(io_interrupts_23)
   ,.io_interrupts_24(io_interrupts_24)
   ,.io_interrupts_25(io_interrupts_25)
   ,.io_interrupts_26(io_interrupts_26)
   ,.io_interrupts_27(io_interrupts_27)
   ,.io_interrupts_28(io_interrupts_28)
   ,.io_interrupts_29(io_interrupts_29)
   ,.io_interrupts_30(io_interrupts_30)
   ,.io_mmio_axi_0_aw_ready(axi_mst_mmio_AWREADY)
   ,.io_mmio_axi_0_aw_valid(axi_mst_mmio_AWVALID)
   ,.io_mmio_axi_0_aw_bits_addr(axi_mst_mmio_AWADDR[31:0])
   ,.io_mmio_axi_0_aw_bits_len(axi_mst_mmio_AWLEN[7:0])
   ,.io_mmio_axi_0_aw_bits_size(axi_mst_mmio_AWSIZE[2:0])
   ,.io_mmio_axi_0_aw_bits_burst(axi_mst_mmio_AWBURST[1:0])
   ,.io_mmio_axi_0_aw_bits_lock(axi_mst_mmio_AWLOCK)
   ,.io_mmio_axi_0_aw_bits_cache(axi_mst_mmio_AWCACHE[3:0])
   ,.io_mmio_axi_0_aw_bits_prot(axi_mst_mmio_AWPROT[2:0])
   ,.io_mmio_axi_0_aw_bits_qos(axi_mst_mmio_AWQOS[3:0])
   ,.io_mmio_axi_0_aw_bits_region(axi_mst_mmio_AWREGION[3:0])
   ,.io_mmio_axi_0_aw_bits_id(axi_mst_mmio_AWID[4:0])
   ,.io_mmio_axi_0_aw_bits_user(axi_mst_mmio_AWUSER)
   ,.io_mmio_axi_0_w_ready(axi_mst_mmio_WREADY)
   ,.io_mmio_axi_0_w_valid(axi_mst_mmio_WVALID)
   ,.io_mmio_axi_0_w_bits_data(axi_mst_mmio_WDATA[63:0])
   ,.io_mmio_axi_0_w_bits_last(axi_mst_mmio_WLAST)
   ,.io_mmio_axi_0_w_bits_id(axi_mst_mmio_WID[4:0])
   ,.io_mmio_axi_0_w_bits_strb(axi_mst_mmio_WSTRB[7:0])
   ,.io_mmio_axi_0_w_bits_user(axi_mst_mmio_WUSER)
   ,.io_mmio_axi_0_b_ready(axi_mst_mmio_BREADY)
   ,.io_mmio_axi_0_b_valid(axi_mst_mmio_BVALID)
   ,.io_mmio_axi_0_b_bits_resp(axi_mst_mmio_BRESP[1:0])
   ,.io_mmio_axi_0_b_bits_id(axi_mst_mmio_BID[4:0])
   ,.io_mmio_axi_0_b_bits_user(axi_mst_mmio_BUSER)
   ,.io_mmio_axi_0_ar_ready(axi_mst_mmio_ARREADY)
   ,.io_mmio_axi_0_ar_valid(axi_mst_mmio_ARVALID)
   ,.io_mmio_axi_0_ar_bits_addr(axi_mst_mmio_ARADDR[31:0])
   ,.io_mmio_axi_0_ar_bits_len(axi_mst_mmio_ARLEN[7:0])
   ,.io_mmio_axi_0_ar_bits_size(axi_mst_mmio_ARSIZE[2:0])
   ,.io_mmio_axi_0_ar_bits_burst(axi_mst_mmio_ARBURST[1:0])
   ,.io_mmio_axi_0_ar_bits_lock(axi_mst_mmio_ARLOCK)
   ,.io_mmio_axi_0_ar_bits_cache(axi_mst_mmio_ARCACHE[3:0])
   ,.io_mmio_axi_0_ar_bits_prot(axi_mst_mmio_ARPROT[2:0])
   ,.io_mmio_axi_0_ar_bits_qos(axi_mst_mmio_ARQOS[3:0])
   ,.io_mmio_axi_0_ar_bits_region(axi_mst_mmio_ARREGION[3:0])
   ,.io_mmio_axi_0_ar_bits_id(axi_mst_mmio_ARID[4:0])
   ,.io_mmio_axi_0_ar_bits_user(axi_mst_mmio_ARUSER)
   ,.io_mmio_axi_0_r_ready(axi_mst_mmio_RREADY)
   ,.io_mmio_axi_0_r_valid(axi_mst_mmio_RVALID)
   ,.io_mmio_axi_0_r_bits_resp(axi_mst_mmio_RRESP[1:0])
   ,.io_mmio_axi_0_r_bits_data(axi_mst_mmio_RDATA[63:0])
   ,.io_mmio_axi_0_r_bits_last(axi_mst_mmio_RLAST)
   ,.io_mmio_axi_0_r_bits_id(axi_mst_mmio_RID[4:0])
   ,.io_mmio_axi_0_r_bits_user(axi_mst_mmio_RUSER)
   ,.io_debug_req_ready(io_debug_req_ready)
   ,.io_debug_req_valid(io_debug_req_valid)
   ,.io_debug_req_bits_addr(io_debug_req_bits_addr[4:0])
   ,.io_debug_req_bits_op(io_debug_req_bits_op[1:0])
   ,.io_debug_req_bits_data(io_debug_req_bits_data[33:0])
   ,.io_debug_resp_ready(io_debug_resp_ready)
   ,.io_debug_resp_valid(io_debug_resp_valid)
   ,.io_debug_resp_bits_resp(io_debug_resp_bits_resp[1:0])
   ,.io_debug_resp_bits_data(io_debug_resp_bits_data[33:0])
   );

  
   //|@Waive no_source DRV_TDO;
   //|@Waive no_source TDO;
   //|@Waive no_sink TCK;
   //|@Waive no_sink TDI;
   //|@Waive no_sink TMS;
   //|@Waive no_sink TRST;
   
   //|@Unparsed begin;
      
      DebugTransportModuleJtag #(.DEBUG_OP_BITS(DEBUG_OP_BITS),
                                 .DEBUG_ADDR_BITS(DEBUG_ADDR_BITS),
                                 .DEBUG_DATA_BITS(DEBUG_DATA_BITS)
                                 //                              ,.JTAG_VERSION(4'h1)
                                 //                              ,.JTAG_PART_NUM(16'h5256)
                                 //                              ,.JTAG_MANUF_ID(12'h005)
                                 ) debugTransportModuleJtag0 (
                                                              
                                                           //JTAG Interface
                                                           
                                                              .TDI(TDI),
                                                              .TDO(TDO),
                                                              .TCK(TCK),
                                                              .TMS(TMS),
                                                              .TRST(TRST),

                                                              
                                                              
                                                              .DRV_TDO(DRV_TDO),
                                                              
                                                              .dtm_req_ready(dtm_req_ready),
                                                              .dtm_req_valid(dtm_req_valid),
                                                              .dtm_req_data(dtm_req_data),
                                                              
                                                              .dtm_resp_ready(dtm_resp_ready),
                                                              .dtm_resp_valid(dtm_resp_valid),
                                                              .dtm_resp_data(dtm_resp_data)
                                                              
                                                              );
      AsyncFifo #(.DEPTH_LG_2(0),
                  .WIDTH(DEBUG_OP_BITS + DEBUG_ADDR_BITS + DEBUG_DATA_BITS))
      debugBusReqFifo(
                      // Write Interface
                      
                      .clk_w(~TCK),
                      .reset_w(TRST),
                      .ready_w(dtm_req_ready), 
                      .valid_w(dtm_req_valid), 
                      .data_w(dtm_req_data),   

                      .clk_r(clk),
                      .reset_r(reset),
                      .ready_r(io_debug_req_ready),
                      .valid_r(io_debug_req_valid),
                      .data_r({io_debug_req_bits_addr, io_debug_req_bits_data, io_debug_req_bits_op})
                      
                      );
      
      AsyncFifo #(.DEPTH_LG_2(0),
                  .WIDTH(DEBUG_OP_BITS + DEBUG_DATA_BITS))
                  debugBusRespFifo(
                                   .clk_w(clk),
                                   .reset_w(reset),
                                   .ready_w(io_debug_resp_ready),
                                   .valid_w(io_debug_resp_valid),
                                   .data_w({io_debug_resp_bits_data, io_debug_resp_bits_resp}),

                                   .clk_r(TCK),
                                   .reset_r(TRST),
                                   .ready_r(dtm_resp_ready),
                                   .valid_r(dtm_resp_valid),
                                   .data_r(dtm_resp_data) 
                                   );

    //|@Unparsed end;
   
 endmodule // CoreSubsystem
